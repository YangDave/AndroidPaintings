package com.vgpt.androidpaintings.compoent.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.squareup.picasso.Picasso;
import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.ExitApplication;
import com.vgpt.androidpaintings.compoent.activity.dialog.WaitingDialog;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;


/**
 * @author Charles
 *
 */
public class PersonInfoActivity extends Activity{
	
	
	TextView usernameText;
	TextView personage;
	TextView personsex;
	TextView personbirthday;
	TextView personintroduction;
	ImageView photo;
	int person_id;
	int user_id;
	Button button;
	Boolean focusedOrNot;
	WaitingDialog dialog;
	String username;
   @SuppressLint("HandlerLeak")
@SuppressWarnings("unchecked")
protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.personinfo);
		ExitApplication.getInstance().addActivity(this);
		usernameText=(TextView)findViewById(R.id.username);
		personage=(TextView)findViewById(R.id.age);
		personsex=(TextView)findViewById(R.id.sex);
		personbirthday=(TextView)findViewById(R.id.birthday);
		personintroduction=(TextView)findViewById(R.id.introduction);
		button=(Button)findViewById(R.id.setfocusBt);
		photo=(ImageView)findViewById(R.id.personHead);
		
		Intent it=getIntent();
		person_id=it.getIntExtra("person_id", 0);
		user_id=it.getIntExtra("user_id", 0);
		username=it.getStringExtra("username");
		usernameText.setText(username);
		focusedOrNot=it.getBooleanExtra("focusedornot", false);
		if(focusedOrNot){
			button.setText("已关注");
			button.setClickable(false);
			button.setBackgroundColor(Color.GRAY);
		}
		
		Toast.makeText(PersonInfoActivity.this,
				"person_id "+person_id+" user_id "+user_id, Toast.LENGTH_LONG).show();
		
		if(user_id==person_id){
			button.setVisibility(View.GONE);
		}
		
		Picasso.with(PersonInfoActivity.this)
		.load(Constant.Api.GET_PHOTO+String.valueOf(person_id)).into(photo);
		
		Map<String,Object> map=new HashMap<String, Object>();
//		TODO
		map.put("user_id", user_id);
		map.put("person_id", person_id);
		GetPersonInfoTask getInfo=new GetPersonInfoTask();
		getInfo.execute(map);
		
		dialog=new WaitingDialog(PersonInfoActivity.this);
		dialog.createDialog();
		dialog.show();
		
		
		button.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				Map<String,Object> setfocusmap=new HashMap<String,Object>();
				setfocusmap.put("user_id", user_id);
				setfocusmap.put("focus_id", person_id);
				SetFocusTask setfocus=new SetFocusTask();
				setfocus.execute(setfocusmap);
				
			}
		});
		
//        button.setOnCheckedChangeListener(new OnCheckedChangeListener() {
//			
//			@Override
//			public void onCheckedChanged(CompoundButton button, boolean isChecked) {
//				
//				if(!isChecked){
//					Map<String,Object> setfocusmap=new HashMap<String,Object>();
//					setfocusmap.put("user_id", user_id);
//					setfocusmap.put("focus_id", person_id);
//					SetFocusTask setfocus=new SetFocusTask();
//					setfocus.execute(setfocusmap);
//				}
//				else{
//					Map<String,Object> delfocusmap=new HashMap<String,Object>();
//					delfocusmap.put("user_id", user_id);
//					delfocusmap.put("focus_id", person_id);
//					DelFocusTask delfocus=new DelFocusTask();
//					delfocus.execute(delfocusmap);
//				}
//			}
//		});
		}
   
   class GetPersonInfoTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   private int checkCode;
	   JSONObject ret;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... param) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(param[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.GET_OTHERS_INFO, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if (json != null ) {
								checkCode=json.optInt("code");
								if(checkCode==1){
									 ret = json
											.optJSONObject("result");

								}
							}

							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}

	
	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		
		dialog.dismiss();
		
		if(checkCode==1){
		if(ret!=null){
			
			String sex=ret.optBoolean("sex")?"男":"女";
			person_id=ret.optInt("person_id");
			String birthday=ret.optString("birthday");
			int age=ret.optInt("age");
			String introduction=ret.optString("introduction");
			Boolean focused=ret.optBoolean("focus");
			
			personage.setText(String.valueOf(age));
			personbirthday.setText(birthday);
			personintroduction.setText(introduction);
			personsex.setText(sex);
			if(focused){
				button.setClickable(false);
				button.setBackgroundColor(Color.GRAY);
			}
			
		}
		}else{
//			TODO
		}
		
	}

	   
   }
   class SetFocusTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   
	   private int checkCode;
	   private Boolean isSuccess=false;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... params) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(params[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.SET_FOCUS, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if(json!=null){
								
							checkCode=json.optInt("code");
							if(json.optInt("code")==1){
								JSONObject result=json.optJSONObject("result");
								if(result!=null){
								isSuccess=result.optBoolean("success");
								}
							}
							}
							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
		
	}


	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		if(isSuccess && (checkCode==1)){
			button.setClickable(false);
			button.setBackgroundColor(Color.GRAY);
			Toast.makeText(PersonInfoActivity.this, "关注成功", Toast.LENGTH_LONG).show();
			
		}
		else{
			Toast.makeText(PersonInfoActivity.this, "关注失败", Toast.LENGTH_LONG).show();
		}
	}

	   
   }
   

   class DelFocusTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   private int checkCode;
	   private Boolean isSuccess;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... params) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(params[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.DEL_FOCUS, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if(json!=null){
								checkCode=json.optInt("code");
							
							if(json.optInt("code")==1){
								JSONObject result=json.optJSONObject("result");
								if(result!=null){
								isSuccess=result.optBoolean("success");
								}
							}
							}
							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}

	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		if((checkCode==1)&& isSuccess){
			Toast.makeText(getApplicationContext(), "关注成功", Toast.LENGTH_LONG).show();
		}
		else{
			Toast.makeText(getApplicationContext(), "关注失败", Toast.LENGTH_LONG).show();
		}
		
	}
	   
   }
}
