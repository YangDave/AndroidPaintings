package com.vgpt.androidpaintings.compoent.fragment;

import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.webkit.URLUtil;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.BitmapExchangeDrawable;
import com.vgpt.androidpaintings.biz.ImageFileCache;
import com.vgpt.androidpaintings.compoent.activity.MainActivity;
import com.vgpt.androidpaintings.compoent.activity.association.Association;
import com.vgpt.androidpaintings.compoent.activity.association.AssociationActivity;
import com.vgpt.androidpaintings.compoent.activity.association.AssociationCreate;
import com.vgpt.androidpaintings.compoent.activity.association.CreateAssociationActivity;
import com.vgpt.androidpaintings.compoent.activity.association.JoinAssociationActivity;
import com.vgpt.androidpaintings.compoent.activity.association.SettingsAssociationActivity;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;

public class Fragment3 extends Fragment {
	ListView associationlist;
	Button extraButton;
	SharedPreferences asso_preference;
	SharedPreferences.Editor asso_editor;
	
	
	JSONArray assoArray;
	AssociationListAdapter adapter;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
//		return super.onCreateView(inflater, container, savedInstanceState);
		View rootView = inflater.inflate(R.layout.fragment3, container, false);
		associationlist=(ListView)rootView.findViewById(R.id.associationlist);
		extraButton=(Button)rootView.findViewById(R.id.extrabutton);
		
		adapter=new AssociationListAdapter(getActivity(),new ArrayList<Map<String,Object>>());
		adapter.getlistItems().clear();
		associationlist.setAdapter(adapter);
		Map<String,Object> map=new HashMap<String, Object>();
		map.put("user_id", MainActivity.user_id);
		GetAssociationListTask assoTask=new GetAssociationListTask();
		assoTask.execute(map);
		
		extraButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				final AlertDialog.Builder builder=new Builder(getActivity());
				builder.setItems(getResources().getStringArray(R.array.AssociationExtraArray),
						new DialogInterface.OnClickListener() {
							
							@Override
							public void onClick(DialogInterface dialog, int position) {
								// TODO Auto-generated method stub
								switch(position){
								case 0:
									Intent joinAssociationIntent=new Intent(getActivity(),JoinAssociationActivity.class);
									startActivity(joinAssociationIntent);
									break;
								case 1:
									Intent createAssociationIntent=new Intent(getActivity(),AssociationCreate.class);
									createAssociationIntent.putExtra("user_id", MainActivity.user_id);
									startActivity(createAssociationIntent);
									break;
								case 2:
									Intent settingsAssociationIntent=new Intent(getActivity(),SettingsAssociationActivity.class);
									startActivity(settingsAssociationIntent);
									break;
								default:
									builder.show().dismiss();
 								}
							}
						});
				builder.show();
				
				
			}
		});
		
		associationlist.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> assoadapter, View view, int position,
					long arg3) {
				
				Association association=new Association((String)((Map<String,Object>)adapter.getItem(position)).get("asso_name"),
						(String)((Map<String,Object>)adapter.getItem(position)).get("asso_mark"),
						(Integer)((Map<String,Object>)adapter.getItem(position)).get("asso_id"));
				Intent intent=new Intent(getActivity(),AssociationActivity.class);
				Bundle associationdata=new Bundle();
				associationdata.putSerializable("association", association);
				intent.putExtras(associationdata);
				startActivity(intent);

			}
		});
		return rootView;
		
		
	}
	class GetAssociationListTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{

		private int checkCode;
	
		
		@Override
		protected void onCancelled() {
			// TODO Auto-generated method stub
			super.onCancelled();
		}

		@Override
		protected void onCancelled(JSONObject result) {
			// TODO Auto-generated method stub
			super.onCancelled(result);
		}

		@Override
		protected void onPostExecute(JSONObject result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			
			if(checkCode==1){
				for(int i=0;i<assoArray.length();i++){
					Map<String,Object> itemmap=new HashMap<String, Object>();
					JSONObject itemObject=assoArray.optJSONObject(i);
					itemmap.put("asso_name", itemObject.optString("asso_name"));
					itemmap.put("asso_id", itemObject.optInt("asso_id"));
					itemmap.put("asso_mark", itemObject.optString("asso_mark"));
					adapter.getlistItems().add(itemmap);
					asso_preference=getActivity().getSharedPreferences(Integer.toString(itemObject.optInt("asso_id")),FragmentActivity.MODE_PRIVATE);
					asso_editor=asso_preference.edit();
					asso_editor.putString("asso_name", itemObject.optString("asso_name"));
					asso_editor.putString("url", itemObject.optString("asso_mark"));
				}
				adapter.notifyDataSetChanged();
			}
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			super.onProgressUpdate(values);
		}

		@Override
		protected JSONObject doInBackground(Map<String, Object>... params) {
			// TODO Auto-generated method stub
			MyHttpClient cl = MyHttpClient.getInstance();

			List<NameValuePair> list = new ArrayList<NameValuePair>();

			JSONObject json = new JSONObject(params[0]);

			try {
				
				NameValuePair pa = new BasicNameValuePair("json",
						json.toString());
				list.add(pa);

				cl.post(Constant.Association.GET_ASSOCIATIONLIST, list,
						new JSONResponseHandler<JSONObject>() {

							@Override
							public JSONObject handlerJson(JSONObject json) {
								if (json != null && json.optInt("code") == 1) {
									checkCode=json.optInt("code");
									assoArray=json.optJSONArray("result");

								}

								return json;
							}
						});
			} catch (Exception e) {

				
			}

			return json;
		}
		
	}
	class AssociationListAdapter extends BaseAdapter{

		@Override
		public void notifyDataSetChanged() {
			// TODO Auto-generated method stub
			super.notifyDataSetChanged();
		}

		private Context mContext;
		private List<Map<String, Object>> listItems;

		public List<Map<String, Object>> getlistItems() {
			return listItems;
		}

		public void setlistItems(List<Map<String, Object>> listItems) {
			this.listItems = listItems;
		}

		@SuppressWarnings("unchecked")
		public AssociationListAdapter(Context mContext,
				List<Map<String, Object>> listItems) {
			this.listItems = listItems;
			this.mContext = mContext;
		}

		public void setmContext(Context mContext) {
			this.mContext = mContext;
		}

		@Override
		public int getCount() {

			return listItems.size();
		}

		@Override
		public Object getItem(int position) {
			return listItems.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ItemViewHolder itemViewHolder = null;
			if (convertView == null) {
				convertView = LayoutInflater.from(mContext).inflate(
						R.layout.simple_item, null);
				itemViewHolder = new ItemViewHolder();
				convertView.setTag(itemViewHolder);

			} else {
				itemViewHolder = (ItemViewHolder) convertView.getTag();

			}

			itemViewHolder.mark = (ImageView) convertView
					.findViewById(R.id.painting);
			itemViewHolder.nameText = (TextView) convertView
					.findViewById(R.id.name);
			itemViewHolder.introductionText = (TextView) convertView
					.findViewById(R.id.introduction);
			@SuppressWarnings("unchecked")
			Map<String, Object> associationItem = (Map<String, Object>) getItem(position);
			itemViewHolder.mark.setTag(associationItem.get("asso_mark")
					.toString());
			itemViewHolder.nameText
					.setText(associationItem.get("asso_name").toString());
			itemViewHolder.introductionText.setText("简介");
			new PaintingShowTask().execute(itemViewHolder.mark);

			return convertView;
		}

		class ItemViewHolder {

			ImageView mark;
			TextView nameText, introductionText;
		}

	}

	class PaintingShowTask extends AsyncTask<View, Integer, Drawable> {

		private View mView;
		private HashMap<String, SoftReference<Drawable>> imageCache;
		Drawable drawable;

		public PaintingShowTask() {
			imageCache = new HashMap<String, SoftReference<Drawable>>();
		}

		@Override
		protected Drawable doInBackground(View... params) {

			// TODO Auto-generated method stub
			drawable = null;
			View view = params[0];
			if (view.getTag() != null) {
				if (imageCache.containsKey(view.getTag())) {
					SoftReference<Drawable> cache = imageCache.get(view
							.getTag().toString());
					drawable = cache.get();
					if (drawable != null) {
						return drawable;
					}
				}
				try {
					if (URLUtil.isHttpUrl(view.getTag().toString())) {
						URL url = new URL(view.getTag().toString());
						HttpURLConnection conn = (HttpURLConnection) url
								.openConnection();
						conn.setDoInput(true);
						conn.connect();
						InputStream stream = conn.getInputStream();
						drawable = Drawable.createFromStream(stream, "src");
						stream.close();
					}

				} catch (Exception e) {
					Log.v("painting", e.getMessage());
					return null;
				}
			}
			this.mView = view;
			return drawable;
		}

		@Override
		protected void onCancelled() {
			// TODO Auto-generated method stub
			super.onCancelled();
		}

		@Override
		protected void onCancelled(Drawable result) {
			// TODO Auto-generated method stub
			super.onCancelled(result);
		}

		@SuppressLint("NewApi")
		@Override
		protected void onPostExecute(Drawable result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (drawable != null) {
				((ImageView)this.mView).setImageDrawable(result);
				Bitmap bitmap=BitmapExchangeDrawable.drawableToBitmap(drawable);
				ImageFileCache imageFileCache=new ImageFileCache();
				imageFileCache.savedBitmap(bitmap, mView.getTag().toString());

			}
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			super.onProgressUpdate(values);
		}

	}


}
