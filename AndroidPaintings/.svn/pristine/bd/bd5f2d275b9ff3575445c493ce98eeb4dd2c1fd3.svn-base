package com.vgpt.androidpaintings.utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.util.Map;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.ImageLoader;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.MyHttpClient;

public abstract class LoadBitmapAsyTaskUtil extends AsyncTask<Map<String,Object>, Integer, Bitmap> {
	
	private Context context;
	private int width;
	private String localUrl;
	private ImageLoader imageLoader;
	private Map<String,Object> map;
	
	

	public LoadBitmapAsyTaskUtil(Context context,int width) {
		this.context = context;
		this.width = width;
		this.imageLoader = ImageLoader.getInstance();
	}

	@Override
	protected Bitmap doInBackground(Map<String,Object>... params) {
		
		map = params[0];
		
		localUrl = Constant.Painting.GET_PICTURE+params[0].get("pic_id")+".jpeg";
		
		ImageLoader imageLoader = ImageLoader.getInstance();
//		优先从缓存中获取
		Bitmap imageBitmap = imageLoader.getBitmapFromMemoryCache(localUrl);
		if(imageBitmap != null){
			return imageBitmap;
		}
		else {
			return  loadImage(localUrl);
		}
		
	}

	@Override
	protected void onPostExecute(Bitmap bitmap) {
		super.onPostExecute(bitmap);
		if(bitmap!= null){
			
			postExecute(bitmap,map);
			
			}
		else{
			
			Toast.makeText(context, R.string.no_connection, Toast.LENGTH_LONG).show();
		}
	}
	
	public abstract void postExecute(Bitmap bitmap,Map<String,Object> map);
	
	private Bitmap loadImage(String imageUrl) {

		int lastSlashIndex = imageUrl.lastIndexOf(".");
		String imageName = imageUrl.substring(0, lastSlashIndex);

		int lsi = imageName.lastIndexOf("=");

		String pic_idStr = imageName.substring(lsi + 1);

		File imageFile = new File(getImagePath(pic_idStr));
		if (!imageFile.exists()) {
			return downloadImage(imageUrl);
		}
		if (imageUrl != null) {
			Bitmap bitmap = ImageLoader.decodeSampledBitmapFromResource(
					imageFile.getPath(), width);
			if (bitmap != null) {
				imageLoader.addBitmapToMemoryCache(imageUrl, bitmap);
				return bitmap;
			}
		}
		return BitmapFactory.decodeResource(context.getResources(), R.drawable.empty_photo);
	}
	
	private String getImagePath(String imageUrl) {
		String imageDir = Constant.FileDir.PIC;
		File file = new File(imageDir);
		if (!file.exists()) {
			file.mkdirs();
		}
		String imagePath = imageDir + imageUrl + ".jpeg";
		return imagePath;
	}
	
	private Bitmap downloadImage(String imageUrl) {

		if (Environment.getExternalStorageState().equals(
				Environment.MEDIA_MOUNTED)) {

			Log.d("TAG", "monted sdcard");
		} else {
			Log.d("TAG", "has no sdcard");
		}
		HttpURLConnection con = null;
		FileOutputStream fos = null;
		BufferedOutputStream bos = null;
		BufferedInputStream bis = null;
		File imageFile = null;
		InputStream in = null;
		try {
			int lastSlashIndex = imageUrl.lastIndexOf(".");
			String imageName = imageUrl.substring(0, lastSlashIndex);

			int lsi = imageName.lastIndexOf("=");

			String pic_idStr = imageName.substring(lsi + 1);

			in = MyHttpClient.getInstance().get(imageName);

			bis = new BufferedInputStream(in);
			imageFile = new File(getImagePath(pic_idStr));
			fos = new FileOutputStream(imageFile);
			bos = new BufferedOutputStream(fos);
			byte[] b = new byte[1024];
			int length;
			while ((length = bis.read(b)) != -1) {
				bos.write(b, 0, length);
				bos.flush();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (bis != null) {
					bis.close();
				}
				if (bos != null) {
					bos.close();
				}
				if (con != null) {
					con.disconnect();
				}
				if (in != null) {

					in.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		if (imageFile != null) {
			Bitmap bitmap = ImageLoader.decodeSampledBitmapFromResource(
					imageFile.getPath(), width);
			if (bitmap != null) {
				imageLoader.addBitmapToMemoryCache(imageUrl, bitmap);
				return bitmap;
			}
		}
		return BitmapFactory.decodeResource(context.getResources(), R.drawable.empty_photo);
	}

}
