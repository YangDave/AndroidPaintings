package com.vgpt.androidpaintings.compoent.activity;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.DatePickerDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.BitmapExchangeDrawable;
import com.vgpt.androidpaintings.biz.DeleteFile;
import com.vgpt.androidpaintings.biz.ExitApplication;
import com.vgpt.androidpaintings.biz.GetBitmapFromLocal;
import com.vgpt.androidpaintings.biz.SaveHeadphotoToLocal;
import com.vgpt.androidpaintings.biz.SystemImageShow;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;
import com.vgpt.androidpaintings.utils.LogUtils;

public class InfoChangeActivity extends Activity {

	// TODO photoTask
	public int user_id;
	public int year;
	public int month;
	public int day;
	EditText nameEdit;
	EditText phoneEdit;
	EditText addressEdit;
	EditText ageEdit;
	EditText introductionEdit;
	Button birthdayEdit;
	String sexreturn;
	Intent infoIntent;
	String username;
	ImageView headphotochange;
	final int PHOTOCHANGE = 3;
	String photo_url;
	String photo_name;
	Bitmap bm;
	byte[] photoByte;
//	Boolean photoExist=false;

	SharedPreferences preferences;
	SharedPreferences.Editor editor;

	public static String intToString(int value) {
		Integer integer = new Integer(value);
		return integer.toString();
	}

	public static int stringToInt(String intstr) {
		Integer integer;
		integer = Integer.valueOf(intstr);
		return integer.intValue();
	}

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_infochange);

		ExitApplication.getInstance().addActivity(this);

		

		infoIntent = getIntent();
		PersonInfo personInfo = (PersonInfo) infoIntent
				.getSerializableExtra("personInfo");
		user_id=infoIntent.getIntExtra("user_id", 0);
		username=infoIntent.getStringExtra("username");
		
//		photoExist=infoIntent.getBooleanExtra("headphotoIsExist", false);
//		String realname = personInfo.getName();
//		String sex = personInfo.getSex();
//		String age = personInfo.getAge();
//		String phone = personInfo.getPhone();
//		String address = personInfo.getAddress();
//		String birthday = personInfo.getBirthday();
//		String introduction = personInfo.getIntroduction();
		preferences=getSharedPreferences(username,FragmentActivity.MODE_PRIVATE);
		editor=preferences.edit();
		String realname=preferences.getString("name",null);
			String sex=preferences.getString("sex","男");
			LogUtils.v("======"+sex);
			String phone=preferences.getString("phone",null);
			String address=preferences.getString("address",null);
			String age=preferences.getString("age",null);
			final String birthday=preferences.getString("birthday",null);
			String introduction=preferences.getString("introduction", null);
			
		nameEdit = (EditText) findViewById(R.id.namechange);
		final RadioGroup sexEdit = (RadioGroup) findViewById(R.id.sexgroup);
		RadioButton maleEdit = (RadioButton) findViewById(R.id.male);
		RadioButton femaleEdit = (RadioButton) findViewById(R.id.female);
		phoneEdit = (EditText) findViewById(R.id.phonechange);
		addressEdit = (EditText) findViewById(R.id.addresschange);
		ageEdit = (EditText) findViewById(R.id.agechange);
		birthdayEdit = (Button) findViewById(R.id.birthdaychange);
		introductionEdit = (EditText) findViewById(R.id.selfintroduction);
		headphotochange = (ImageView) findViewById(R.id.headphotoId);
		photo_url="/storage/extSdCard/paintings/"+user_id+".jpeg";
		Bitmap bm=GetBitmapFromLocal.getBitmapAutoResize(photo_url);
		if(bm!=null){
			headphotochange.setImageBitmap(bm);
		}

		Button cancelButton = (Button) findViewById(R.id.cancelInfoChange);
		Button okButton = (Button) findViewById(R.id.okinfoChange);

		headphotochange.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				final AlertDialog.Builder builder = new Builder(
						InfoChangeActivity.this);
				builder.setItems(
						getResources().getStringArray(
								R.array.headphotoItemsArray),
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int position) {
								// TODO Auto-generated method stub
								switch (position) {
								// local photo
								case 0: {
									Intent intent = new Intent(
											Intent.ACTION_GET_CONTENT);
									intent.addCategory(Intent.CATEGORY_OPENABLE);
									intent.setType("image/*");
									intent.putExtra("crop", "true");
									intent.putExtra("aspectX", 1);
									intent.putExtra("aspectY", 1);
									intent.putExtra("outputX", 80);
									intent.putExtra("outputY", 80);
									intent.putExtra("return-data", true);
									startActivityForResult(intent, 11);
								}
									break;
								// local camera
								case 1: {
									Intent intent = new Intent(
											"android.media.action.IMAGE_CAPTURE");
									intent.putExtra(
											MediaStore.EXTRA_OUTPUT,
											Uri.fromFile(new File(
													Environment
															.getExternalStorageDirectory(),
													"camera.jpg")));
									intent.putExtra(
											MediaStore.EXTRA_VIDEO_QUALITY, 0);
									startActivityForResult(intent, 10);
								}
									break;
//								====查看图片
								case 2:
									new SystemImageShow(photo_url, InfoChangeActivity.this).show();
									break;
								default:
									builder.show().dismiss();
								}
							}
						});
				builder.show();

			}
		});

		phoneEdit.setSelection(phoneEdit.getText().length());
		addressEdit.setSelection(addressEdit.getText().length());
		ageEdit.setSelection(ageEdit.getText().length());

		nameEdit.setText(realname);
		nameEdit.setSelection(nameEdit.getText().length());

		if (sex.equals("男")) {
		   sexEdit.check(R.id.male);
		
			LogUtils.v("sex"+sex+"sex equals male");
		} else {
			sexEdit.check(R.id.female);
			LogUtils.v("sex"+sex);
		}

		phoneEdit.setText(phone);
		addressEdit.setText(address);
		birthdayEdit.setText(birthday);
		ageEdit.setText(age);
		Toast.makeText(InfoChangeActivity.this, "birthday="+birthday, Toast.LENGTH_LONG).show();
		
		cancelButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent cancelIntent = new Intent(InfoChangeActivity.this,
						MainActivity.class);
				startActivity(cancelIntent);
				InfoChangeActivity.this.finish();

			}
		});
		final String[] date=birthday.split("-");
		LogUtils.v(date[0]+"年"+date[1]+"月"+date[2]+"日");

		birthdayEdit.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				Calendar c = Calendar.getInstance();
				
				// DatePickerDialog birthdaySet=new
				// DatePickerDialog(InfoChangeActivity.this, DateSetListener,
				// c.get(Calendar.YEAR), c.get(Calendar.MONTH),
				// c.get(Calendar.DAY_OF_MONTH));

				new DatePickerDialog(InfoChangeActivity.this,
						new DatePickerDialog.OnDateSetListener() {

							@Override
							public void onDateSet(DatePicker view, int year,
									int monthOfYear, int dayOfMonth) {

								monthOfYear=monthOfYear+1;
								birthdayEdit.setText(year + "-" + monthOfYear
										+ "-" + dayOfMonth);
								
							}
						}, Integer.parseInt(date[0]), Integer.parseInt(date[1])-1, Integer.parseInt(date[2])).show();
			}
		});
		
		LogUtils.v("年："+Calendar.YEAR+"  月："+Calendar.MONTH+" 日:"+Calendar.DAY_OF_MONTH);

		okButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				int changedage = 0;
				int changedphone = 0;
				// Bundle changeInfoData=new Bundle();
				// Map<String, Object> birthday = new HashMap<String, Object>();
				// birthday.put("year",year );
				// birthday.put("month", month);
				// birthday.put("day", day);

				String changedbirthday = (String) birthdayEdit.getText();

				if (StringUtils.isNumeric(ageEdit.getText().toString())) {
					changedage = Integer.valueOf(ageEdit.getText().toString())
							.intValue();
				}
				if (StringUtils.isNumeric(phoneEdit.getText().toString())) {

					changedphone = Integer.valueOf(
							phoneEdit.getText().toString()).intValue();

				}
				String changedaddress;
				changedaddress = addressEdit.getText().toString();

				Boolean changedsex = sexEdit.getCheckedRadioButtonId() == R.id.male ? true
						: false;
				sexreturn = sexEdit.getCheckedRadioButtonId() == R.id.male ? "男" : "女";
//				user_id = MainActivity.user_id;
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("user_id", user_id);
				map.put("name", nameEdit.getText().toString());
				map.put("sex", changedsex);
				map.put("phone", changedphone);
				map.put("birthday", changedbirthday);
				map.put("address", changedaddress);
				map.put("age", changedage);
				map.put("introduction", introductionEdit.getText().toString());
				map.put("photo_name", String.valueOf(user_id) + ".jpg");

				InfoChangeTask infoChange = new InfoChangeTask();
				infoChange.execute(map);

				/*
				 * PersonInfo savedPerson=new
				 * PersonInfo(nameEdit.getText().toString(), age,phone,sex,
				 * addressEdit
				 * .getText().toString(),birthdayEdit.getText().toString());
				 * changeInfoData.putSerializable("savedPerson", savedPerson);
				 * Intent savedIntent=new
				 * Intent(InfoChangeActivity.this,Fragment4.class);
				 * savedIntent.putExtras(changeInfoData);
				 * InfoChangeActivity.this.setResult(0,savedIntent);
				 * InfoChangeActivity.this.finish();
				 */
			}
		});
	}

	class InfoChangeTask extends
			AsyncTask<Map<String, Object>, Void, JSONObject> {
		public boolean infoChange = false;
		private int checkCode;
		private JSONObject ret;

		@Override
		protected JSONObject doInBackground(Map<String, Object>... params) {

			MultipartEntity postEntity = new MultipartEntity();
			postEntity.addPart(
					"Headphoto",
					new FileBody(new File("/storage/extSdCard"+ "/paintings/"+String.valueOf(user_id)+".jpeg")));
			JSONObject json = new JSONObject(params[0]);

			try {
				postEntity.addPart("json", new StringBody(json.toString()));
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				MyHttpClient.getInstance().post(Constant.Api.USER_DATA,
						postEntity, new JSONResponseHandler<JSONObject>() {

							@Override
							public JSONObject handlerJson(JSONObject json) {
								// TODO Auto-generated method stub
								if ((json != null)
										&& (json.optInt("code") == 1)) {
									ret = json.optJSONObject("result");
									checkCode = json.optInt("code");
								}
								return json;
							}

						});
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return json;
		}

		@Override
		protected void onProgressUpdate(Void... values) {
			// TODO Auto-generated method stub
			super.onProgressUpdate(values);

			// this.startActivity(intent);
			// SignUpActivity.this.finish();
		}

		@Override
		protected void onPostExecute(JSONObject result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (ret != null) {
				infoChange = ret.optBoolean("success");

			}
			if ((checkCode == 1) && infoChange) {
				username = MainActivity.username;
				preferences = getSharedPreferences(username, MODE_PRIVATE);
				editor = preferences.edit();
				editor.putString("name", nameEdit.getText().toString());
				editor.putString("age", ageEdit.getText().toString());
				editor.putString("phone", phoneEdit.getText().toString());
				editor.putString("sex", sexreturn);
				editor.putString("address", addressEdit.getText().toString());
				editor.putString("birthday", birthdayEdit.getText().toString());
				editor.putString("introduction", introductionEdit.getText()
						.toString());
				editor.commit();
				if(bm!=null){
				try {
					String dir = Environment.getExternalStorageDirectory().getPath();
				

					LogUtils.v("======================================" + dir);
					File f = new File("/storage/extSdCard/paintings/");

					if (!f.exists()) {
						f.mkdir();
					}
					File file = new File("/storage/extSdCard/paintings/"+String.valueOf(user_id)+".jpeg");
					if(file.exists()&& file.isFile()){
						file.delete();
						LogUtils.v("file is exist");
//						Toast.makeText(this, "删除成功", 5000).show();
					}
					if(!file.exists()){
						LogUtils.v("===========file is deleted");
						file = new File("/storage/extSdCard/paintings/"+String.valueOf(user_id)+".jpeg");
					}
						
					OutputStream outStream = new FileOutputStream(file);
					bm.compress(Bitmap.CompressFormat.JPEG, 100, outStream);
					outStream.flush();
					outStream.close();
				} catch (Exception e) {
					LogUtils.e(e);
				}
				}

				Bundle changeInfoData = new Bundle();
				PersonInfo savedPerson = new PersonInfo(nameEdit.getText()
						.toString(), ageEdit.getText().toString(), sexreturn,
						phoneEdit.getText().toString(), birthdayEdit.getText()
								.toString(), addressEdit.getText().toString(),
						introductionEdit.getText().toString());

				changeInfoData.putSerializable("savedPerson", savedPerson);
				// Intent savedIntent=new
				// Intent(InfoChangeActivity.this,Fragment4.class);
				infoIntent.putExtras(changeInfoData);
				// infoIntent.putExtra("photo_url", photo_url);
				// infoIntent.putExtra("photo_name", photo_name);

				InfoChangeActivity.this.setResult(18, infoIntent);
				InfoChangeActivity.this.finish();

			} else {
				Toast.makeText(InfoChangeActivity.this, "修改失败", 5000).show();
			}
		}
	}

	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == 10 && resultCode == Activity.RESULT_OK) {
			Drawable drawable = Drawable.createFromPath(new File(Environment
					.getExternalStorageDirectory(), "camera.jpg")
					.getAbsolutePath());
			bm = BitmapExchangeDrawable.drawableToBitmap(drawable);
			this.headphotochange.setImageBitmap(bm);
			System.out.println("data-->" + data);
		} else if (requestCode == 11 && resultCode == Activity.RESULT_OK) {
			System.out.println("data2-->" + data);
			bm = (Bitmap) data.getExtras().get("data");
			headphotochange.setImageBitmap(bm);
		}
		
		LogUtils.v("user_id"+user_id);

		
		

		// ContentValues values = new ContentValues();
		// values.put(Media.DISPLAY_NAME, String.valueOf(user_id));
		// values.put(Media.MIME_TYPE, "jpeg");
		// Uri uri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI,
		// values);
		// OutputStream os = null;
		// try {
		// os = getContentResolver().openOutputStream(uri);
		// bm.compress(Bitmap.CompressFormat.JPEG, 100, os);
		// os.close();
		// } catch (IOException e) {
		// e.printStackTrace();
		// }
	}
}
