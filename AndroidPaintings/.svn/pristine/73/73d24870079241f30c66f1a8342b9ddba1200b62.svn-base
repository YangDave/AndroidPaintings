package com.vgpt.androidpaintings.compoent.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.ExitApplication;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;


/**
 * @author Charles
 *
 */
public class PersonInfoActivity extends Activity{
	
	
	TextView personname;
	TextView personage;
	TextView personsex;
	TextView personbirthday;
	TextView personintroduction;
	TextView personaddress;
	int person_id;
	int user_id=MainActivity.user_id;
	ToggleButton toggleButton;
	Boolean focusedOrNot;
   @SuppressWarnings("unchecked")
protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.personinfo);
		ExitApplication.getInstance().addActivity(this);
		personname=(TextView)findViewById(R.id.personname);
		personage=(TextView)findViewById(R.id.age);
		personsex=(TextView)findViewById(R.id.sex);
		personbirthday=(TextView)findViewById(R.id.birthday);
		personintroduction=(TextView)findViewById(R.id.introduction);
		personaddress=(TextView)findViewById(R.id.address);
		toggleButton=(ToggleButton)findViewById(R.id.toggle);
		
		toggleButton.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(CompoundButton button, boolean isChecked) {
				
				if(!isChecked){
					Map<String,Object> setfocusmap=new HashMap<String,Object>();
					setfocusmap.put("user_id", MainActivity.user_id);
					setfocusmap.put("focus_id", person_id);
					SetFocusTask setfocus=new SetFocusTask();
					setfocus.execute(setfocusmap);
				}
				else{
					Map<String,Object> delfocusmap=new HashMap<String,Object>();
					delfocusmap.put("user_id", user_id);
					delfocusmap.put("focus_id", person_id);
					DelFocusTask delfocus=new DelFocusTask();
					delfocus.execute(delfocusmap);
				}
			}
		});
		
		Intent it=getIntent();
		person_id=it.getIntExtra("person_id", 0);
		user_id=it.getIntExtra("user_id", 0);
		focusedOrNot=it.getBooleanExtra("focusedornot", false);
		if(focusedOrNot){
		toggleButton.setChecked(false);
		}
		Map<String,Object> map=new HashMap<String, Object>();
		map.put("user_id", person_id);
		GetPersonInfoTask getInfo=new GetPersonInfoTask();
		getInfo.execute(map);
		
		
		}
   
   public void personInfoShow(PersonInfo person){
		personname.setText(person.getName());
		personage.setText(person.getAge());
		personsex.setText(person.getSex());
		personbirthday.setText(person.getBirthday());
		personaddress.setText(person.getAddress());
		personintroduction.setText(person.getIntroduction());
	}
   class GetPersonInfoTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   private int checkCode;
	   JSONObject ret;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... param) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(param[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.INFO, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if (json != null && json.optInt("code") == 1) {
								 ret = json
										.optJSONObject("result");
								

								checkCode = json.optInt("code");
							}

							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}

	
	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		if((checkCode==1)&&(ret!=null)){
			
			String sex=ret.optInt("sex")==1?"男":"女";
			person_id=ret.optInt("user_id");
			String birthday=ret.optString("birthday");
			String address=ret.optString("address");
			PersonInfo person=new PersonInfo(ret.optString("name"),
					ret.optInt("age")+"��",sex,null,birthday,address,ret.optString("introduction"));
			personInfoShow(person);
			
		}
		
		
	}

	   
   }
   class SetFocusTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   
	   private int checkCode;
	   private Boolean isSuccess=false;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... params) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(params[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.SET_FOCUS, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if((json!=null)&&(json.optInt("code")==1)){
								JSONObject result=json.optJSONObject("result");
								checkCode=json.optInt("code");
								if(result!=null){
								isSuccess=result.optBoolean("success");
								}
							}
							
							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
		
	}


	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		if(isSuccess && (checkCode==1)){
			Toast.makeText(PersonInfoActivity.this, "获取用户信息成功", Toast.LENGTH_LONG).show();
			
		}
	}

	@Override
	protected void onPreExecute() {
		super.onPreExecute();
	}

	@Override
	protected void onProgressUpdate(Integer... values) {
		super.onProgressUpdate(values);
	}
	   
   }
   

   class DelFocusTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
	   private int checkCode;
	   private Boolean isSuccess;

	@Override
	protected JSONObject doInBackground(Map<String, Object>... params) {
		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(params[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.DEL_FOCUS, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if((json!=null)&&(json.optInt("code")==1)){
								JSONObject result=json.optJSONObject("result");
								checkCode=json.optInt("code");
								if(result!=null){
								isSuccess=result.optBoolean("success");
								}
							}
							
							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}

	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		if((checkCode==1)&& isSuccess){
			toggleButton.setChecked(true);
			Toast.makeText(getApplicationContext(), "关注成功", Toast.LENGTH_LONG).show();
		}
		else{
			Toast.makeText(getApplicationContext(), "关注失败", Toast.LENGTH_LONG).show();
		}
		
	}
	   
   }
}
