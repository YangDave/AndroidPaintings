package com.vgpt.androidpaintings.compoent.fragment;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.SoftReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.webkit.URLUtil;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.BitmapExchangeDrawable;
import com.vgpt.androidpaintings.biz.GetBitmapFromLocal;
import com.vgpt.androidpaintings.compoent.activity.MainActivity;
import com.vgpt.androidpaintings.compoent.activity.MyApplication;
import com.vgpt.androidpaintings.compoent.activity.ShowImageActivity;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;
import com.vgpt.androidpaintings.utils.LogUtils;

public class Fragment1 extends Fragment implements OnGestureListener, OnTouchListener{
	private static final int LEFT = 1;
	private static final int RIGHT = 0;
	private static int SIZE = 3;

	private boolean isWorking = false;
	Button all_button;
	Button figure_button;
	Button landscape_button;
	Button bird_button;
	Button insect_button;
	Button more_button;
	int buttonId;
	ListView list;
	JSONArray items;
	int[] page = { 1, 1, 1, 1, 1, 1 };
	final int LENGTH=50;
	
	List<Integer> pic_idList=new ArrayList<Integer>();
	
	List<ImageView> imageList=new ArrayList<ImageView>();
	
	GestureDetector gestureDetector;
	ImageListAdapter adapter = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

	}

	@SuppressWarnings("unchecked")
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// return super.onCreateView(inflater, container, savedInstanceState);
		View rootView = inflater.inflate(R.layout.fragment1, container, false);
		
		rootView.setOnTouchListener(this);
		list = (ListView) rootView.findViewById(R.id.listview_container);
		all_button = (Button) rootView.findViewById(R.id.all_button);
		figure_button = (Button) rootView.findViewById(R.id.figure_button);
		landscape_button = (Button) rootView
				.findViewById(R.id.landscape_button);
		bird_button = (Button) rootView.findViewById(R.id.bird_button);
		insect_button = (Button) rootView.findViewById(R.id.insect_button);
		more_button = (Button) rootView.findViewById(R.id.more_button);

		figure_button.setClickable(false);
		buttonId = R.id.figure_button;

		ButtonClick buttonListener = new ButtonClick();
		figure_button.setOnClickListener(buttonListener);
		landscape_button.setOnClickListener(buttonListener);
		bird_button.setOnClickListener(buttonListener);
		insect_button.setOnClickListener(buttonListener);
		more_button.setOnClickListener(buttonListener);
		all_button.setOnClickListener(buttonListener);
		adapter = new ImageListAdapter(MyApplication.applicationContext,
				new ArrayList<Map<String, Object>>());
		list.setAdapter(adapter);
		all_button.setClickable(false);
		all_button.setBackgroundColor(Color.GRAY);
		Map<String,Object> painting_first_show=new HashMap<String, Object>();
		painting_first_show.put("page",1);
		painting_first_show.put("size",SIZE);
		painting_first_show.put("category", "all");
		QueryListTask first_show=new QueryListTask();
		first_show.execute(painting_first_show);
		list.setOnScrollListener(new OnScrollListener() {

			@SuppressWarnings("unchecked")
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				// TODO Auto-generated method stub
				if (scrollState == OnScrollListener.SCROLL_STATE_IDLE
						&& !isWorking) {
					isWorking = true;
					if (view.getLastVisiblePosition() == view.getCount() - 1) {
						buttonId = all_button.isClickable() ? (figure_button
								.isClickable() ? (landscape_button
								.isClickable() ? (bird_button.isClickable() ? (insect_button
								.isClickable() ? R.id.more_button
								: R.id.insect_button) : R.id.bird_button)
								: R.id.landscape_button)
								: R.id.figure_button)
								: R.id.all_button;
						String category = buttonId == R.id.all_button ? "all"
								: buttonId == R.id.figure_button ? "figure"
										: buttonId == R.id.landscape_button ? "landscape"
												: buttonId == R.id.bird_button ? "bird"
														: buttonId == R.id.insect_button ? "insect"
																: "more";
						int i = buttonId == R.id.all_button ? 0
								: buttonId == R.id.figure_button ? 1
										: buttonId == R.id.landscape_button ? 2
												: buttonId == R.id.bird_button ? 3
														: buttonId == R.id.insect_button ? 4
																: 5;
						Map<String, Object> paintingRequest = new HashMap<String, Object>();
						paintingRequest.put("page", ++page[i]);
						paintingRequest.put("size", SIZE);
						paintingRequest.put("category", category);
						QueryListTask load = new QueryListTask();
						load.execute(paintingRequest);
					}

					isWorking = false;

				}

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				// TODO Auto-generated method stub

			}
		});
		list.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> list_adapter, View listView, int position,
					long arg3) {
				Intent itemIntent=new Intent(getActivity(),ShowImageActivity.class);
				itemIntent.putExtra("pic_id", 
						(Integer) ((Map<String,Object>) adapter.getItem(position)).get("pic_id"));
				itemIntent.putExtra("user_id", MainActivity.user_id);
				itemIntent.putExtra("collectornot", false);
				startActivity(itemIntent);
			}
		});
		gestureDetector = new GestureDetector(getActivity(), this);
		return rootView;

	}
    
   
	class ButtonClick implements OnClickListener {

		@SuppressWarnings("unchecked")
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			 int pressedbuttonId = all_button.isClickable() ? (figure_button.isClickable() ? (landscape_button
					.isClickable() ? (bird_button.isClickable() ? (insect_button
					.isClickable() ? R.id.more_button : R.id.insect_button)
					: R.id.bird_button)
					: R.id.landscape_button)
					: R.id.figure_button)
					: R.id.all_button;
			
			switch (pressedbuttonId) {
			case R.id.all_button: {
				all_button.setClickable(true);
				all_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			case R.id.figure_button: {
				figure_button.setClickable(true);
				figure_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			case R.id.landscape_button: {
				landscape_button.setClickable(true);
				landscape_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			case R.id.bird_button: {
				bird_button.setClickable(true);
				bird_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			case R.id.insect_button: {
				insect_button.setClickable(true);
				insect_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			case R.id.more_button: {
				more_button.setClickable(true);
				more_button.setBackgroundColor(Color.LTGRAY);
			}
				break;
			}

			adapter.getJsonItems().clear();
			v.setClickable(false);
			v.setBackgroundColor(Color.GRAY);
			buttonId = v.getId();
			String category = buttonId == R.id.all_button ? "all"
					: buttonId == R.id.figure_button ? "figure"
							: buttonId == R.id.landscape_button ? "landscape"
									: buttonId == R.id.bird_button ? "bird"
											: buttonId == R.id.insect_button ? "insect"
													: "more";
			Map<String, Object> paintingRequest = new HashMap<String, Object>();
			paintingRequest.put("page", 1);
			paintingRequest.put("size", SIZE);
			paintingRequest.put("category", category);
			QueryListTask load = new QueryListTask();
			load.execute(paintingRequest);

		}

	}

	class QueryListTask extends
			AsyncTask<Map<String, Object>, Integer, JSONObject> {
		int checkCode;

		public boolean isWorking = false;

		int pages;

		@Override
		protected void onCancelled() {
			isWorking = false;
			super.onCancelled();
		}

		@Override
		protected void onCancelled(JSONObject result) {
			// TODO Auto-generated method stub
			super.onCancelled(result);
		}

		@Override
		protected void onPreExecute() {
			isWorking = true;
			super.onPreExecute();

		}

		private void setBackground(String string) {
			// TODO Auto-generated method stub

		}

		@SuppressWarnings("unchecked")
		@Override
		protected void onPostExecute(JSONObject result) {
			super.onPostExecute(result);
			if (checkCode == 1) {

				if (pages == 1) {
					adapter.getJsonItems().clear();
				}
				for (int i = 0; i < items.length(); i++) {
					Map<String, Object> listItem = new HashMap<String, Object>();
					JSONObject itemObject = items.optJSONObject(i);
					listItem.put("name", itemObject.optString("name"));
					
					listItem.put("introduction",
							itemObject.optString("introduction"));
					listItem.put("pic_id", itemObject.optInt("pic_id"));
					adapter.getJsonItems().add(listItem);

				}
				adapter.notifyDataSetChanged();
				isWorking = false;
				
			}
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// trsxe/set
			super.onProgressUpdate(values);

		}

		@Override
		protected JSONObject doInBackground(Map<String, Object>... params) {

			isWorking = true;

			MyHttpClient cl = MyHttpClient.getInstance();

			List<NameValuePair> list = new ArrayList<NameValuePair>();

			JSONObject json = new JSONObject(params[0]);

			NameValuePair pa = new BasicNameValuePair("json", json.toString());
			list.add(pa);

			try {
				cl.post(Constant.Painting.PAINTING_LOAD, list,
						new JSONResponseHandler<JSONObject>() {

							@Override
							public JSONObject handlerJson(JSONObject json) {
								// "{'username':'sdfsf'}"
								if (json != null && json.optInt("code") == 1) {
									JSONObject ret = json
											.optJSONObject("result");
									items = ret.optJSONArray("items");
									JSONObject request = json
											.optJSONObject("request");
									pages = request.optInt("page");
									

									checkCode = json.optInt("code");
									// JSONArray js=new JSONArray();
									// Map<String, Object> map=new
									// HashMap<String,Object>();
									// TODO
								}

								return json;
							}
						});
			} catch (Exception e) {
				e.printStackTrace();
				//Toast.makeText(getActivity(), "未知错误", 5000);
			}

			return json;
			
		}

	}

//	private GestureDetector.OnGestureListener onGestureListener = new GestureDetector.SimpleOnGestureListener() {
//		@Override
//		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
//				float velocityY) {
////			float x = e2.getX() - e1.getX();
////			float y = e2.getY() - e1.getY();
//
//			if (e1.getX() - e2.getX() > LENGTH) {
//
//				doResult(RIGHT);
//				Toast.makeText(getActivity(), "�ҷ�", 5000).show();
//			} else if (e1.getX() - e2.getX()<-LENGTH) {
//				doResult(LEFT);
//				Toast.makeText(getActivity(), "��", 5000).show();
//			}
//			return true;
//		}
//	};
//
//	public boolean onTouchEvent(MotionEvent event) {
//		return gestureDetector.onTouchEvent(event);
//	}

	public void doResult(int action) {
		buttonId = all_button.isClickable() ? (figure_button.isClickable() ? (landscape_button
				.isClickable() ? (bird_button.isClickable() ? (insect_button
				.isClickable() ? R.id.more_button : R.id.insect_button)
				: R.id.bird_button) : R.id.landscape_button)
				: R.id.figure_button)
				: R.id.all_button;
		int category = buttonId == R.id.all_button ? 1
				: buttonId == R.id.figure_button ? 2
						: buttonId == R.id.landscape_button ? 3
								: buttonId == R.id.bird_button ? 4
										: buttonId == R.id.insect_button ? 5
												: 6;

		switch (action) {
		case RIGHT:

		{
			--category;
			switch (category) {
			case 2: {
				new ButtonClick().onClick(figure_button);
			}
				break;
			case 3: {
				new ButtonClick().onClick(landscape_button);
			}
				break;
			case 4: {
				new ButtonClick().onClick(bird_button);
			}
				break;
			case 5: {
				new ButtonClick().onClick(insect_button);
			}
				break;
			case 1: {
				new ButtonClick().onClick(all_button);
			}
				break;
			default: {
			}
				break;
			}
		}
			break;

		case LEFT: {
			++category;
			switch (category) {
			case 2: {
				new ButtonClick().onClick(figure_button);
			}
				break;
			case 3: {
				new ButtonClick().onClick(landscape_button);
			}
				break;
			case 4: {
				new ButtonClick().onClick(bird_button);
			}
				break;
			case 5: {
				new ButtonClick().onClick(insect_button);
			}
				break;
			case 6: {
				new ButtonClick().onClick(more_button);
			}
				break;
			default: {
			}
				break;
			}

		}
			break;
		}
	}

	class ImageListAdapter extends BaseAdapter {
		@Override
		public void notifyDataSetChanged() {
			// TODO Auto-generated method stub
			super.notifyDataSetChanged();
		}

		private Context mContext;
		private List<Map<String, Object>> jsonItems;

		public List<Map<String, Object>> getJsonItems() {
			return jsonItems;
		}

		public void setJsonItems(List<Map<String, Object>> jsonItems) {
			this.jsonItems = jsonItems;
		}

		@SuppressWarnings("unchecked")
		public ImageListAdapter(Context mContext,
				List<Map<String, Object>> jsonItems) {
			this.jsonItems = jsonItems;
			this.mContext = mContext;
		}

		public void setmContext(Context mContext) {
			this.mContext = mContext;
		}

		@Override
		public int getCount() {

			return jsonItems.size();
		}

		@Override
		public Object getItem(int position) {
			return jsonItems.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ItemViewHolder itemViewHolder = null;
			if (convertView == null) {
				convertView = LayoutInflater.from(mContext).inflate(
						R.layout.simple_item, null);
				itemViewHolder = new ItemViewHolder();
				convertView.setTag(itemViewHolder);

			} else {
				itemViewHolder = (ItemViewHolder) convertView.getTag();

			}

			itemViewHolder.painting = (ImageView) convertView
					.findViewById(R.id.painting);
			itemViewHolder.nameText = (TextView) convertView
					.findViewById(R.id.name);
			itemViewHolder.introductionText = (TextView) convertView
					.findViewById(R.id.introduction);
			@SuppressWarnings("unchecked")
			Map<String, Object> paintingItem = (Map<String, Object>) getItem(position);
			itemViewHolder.painting.setTag(paintingItem.get("pic_id"));
			itemViewHolder.nameText
					.setText(paintingItem.get("name").toString());
			itemViewHolder.introductionText.setText(paintingItem.get(
					"introduction").toString());
			
			//TODO
			//去本地查看有没有
			String url="/storage/extSdCard/paintings/picture/"+String.valueOf(paintingItem.get("pic_id"))+".jpeg";
			File imageFile=new File(url);
			if((imageFile.exists())&&(GetBitmapFromLocal.getBitmapAutoResize(url)!=null)){
				itemViewHolder.painting.setImageBitmap(GetBitmapFromLocal.getBitmapAutoResize(url));
				
			}
			else{
				new PaintingShowTask().execute((Integer)paintingItem.get("pic_id"));
			}
			
			
			//pic_idList.add(Integer.valueOf((String) paintingItem.get("pic_id")));
			
			//imageList.add(itemViewHolder.painting);
			

			return convertView;
		}

		class ItemViewHolder {

			ImageView painting;
			TextView nameText, introductionText;
		}

	}
	
	class LoadPaintings{
		
		int length=3;
		
		public synchronized void loadPaintings(){
			while(length<1){
				try{
					wait();
				}catch(InterruptedException e){
					e.printStackTrace();
				}
			}
		}
		
	}
	
	class PaintingShowTask extends AsyncTask<Integer, Integer, Drawable>{
		
		Drawable drawable;
		Bitmap bm;

		@Override
		protected void onPostExecute(Drawable result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if(drawable!=null){
				adapter.notifyDataSetChanged();
			}
		}

		@Override
		protected Drawable doInBackground(Integer... params) {
			
			drawable = null;
			Integer integer=params[0];
			int pic_id=integer.intValue();
			
			MyHttpClient cl = MyHttpClient.getInstance();

			List<NameValuePair> list = new ArrayList<NameValuePair>();
			
			Map<String,Object> paintingmap=new HashMap<String, Object>();
			
			paintingmap.put("pic_id",pic_id);

			JSONObject json = new JSONObject(paintingmap);

			NameValuePair pa = new BasicNameValuePair("json", json.toString());
			list.add(pa);

			try {
				HttpEntity he=cl.post(Constant.Painting.GET_PICTURE, list);
				InputStream is=he.getContent();
				drawable=Drawable.createFromStream(is, "src");
				LogUtils.v(drawable.toString());
				bm=BitmapExchangeDrawable.drawableToBitmap(drawable);
				
				is.close();
				
			} catch (Exception e) {
				e.printStackTrace();
				//Toast.makeText(getActivity(), "未知错误", 5000);
			}
			//TODO
			//把图片存到本地 外加时间戳
			
			try {
//				String dir = Environment.getExternalStorageDirectory().getPath();
			

				File f = new File("/storage/extSdCard/paintings/picture/");

				if (!f.exists()) {
					f.mkdir();
				}
				File file = new File("/storage/extSdCard/paintings/picture/"+String.valueOf(pic_id)+".jpeg");
				if(file.exists()&& file.isFile()){
					file.delete();
					LogUtils.v("file is exist");
//					Toast.makeText(this, "删除成功", 5000).show();
				}
				if(!file.exists()){
					OutputStream outStream = new FileOutputStream(file);
					bm.compress(Bitmap.CompressFormat.JPEG, 100, outStream);
					outStream.flush();
					outStream.close();
					
				}
					
				
			} catch (Exception e) {
				LogUtils.e(e);
			}

			return drawable;
			
		}
		
	}



	@Override
	public boolean onTouch(View arg0, MotionEvent arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean onDown(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean onFling(MotionEvent arg0, MotionEvent arg1, float arg2,
			float arg3) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void onLongPress(MotionEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean onScroll(MotionEvent arg0, MotionEvent arg1, float arg2,
			float arg3) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void onShowPress(MotionEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean onSingleTapUp(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return false;
	}

}
