package com.vgpt.androidpaintings.compoent.activity.association;

import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.URLUtil;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.BitmapExchangeDrawable;
import com.vgpt.androidpaintings.biz.ExitApplication;
import com.vgpt.androidpaintings.biz.ImageFileCache;

public class AssociationActivity extends Activity{
	TextView associationNameText;

	Association association=null;
	ImageView mark;
	String asso_name;
	String url;
	int asso_id=0;
	Button assoInfo;
	Button assoMember;
	Button assoNotice;
	Button assoActivity;
	Button assoMore;
	Button assoJoinPerson;
	Drawable drawable;
	
	
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_association_single);
		ExitApplication.getInstance().addActivity(this);
		associationNameText=(TextView)findViewById(R.id.associationname);
		mark=(ImageView)findViewById(R.id.mark);
		assoInfo=(Button)findViewById(R.id.associationinfo);
		assoMember=(Button)findViewById(R.id.member);
		assoNotice=(Button)findViewById(R.id.notice);
		assoActivity=(Button)findViewById(R.id.activity);
		assoMore=(Button)findViewById(R.id.more);
		assoJoinPerson=(Button)findViewById(R.id.usertojoinin);
		
		
		
		Intent intent=getIntent();

//		@SuppressWarnings("unchecked")
		association=(Association)intent.getSerializableExtra("association");
		asso_name=association.getAsso_name();
	    url=association.getMark_url();
	    asso_id=association.getAsso_id();
	
		associationNameText.setText(asso_name);
	    ImageFileCache imageFileCache=new ImageFileCache();
	    
	    Bitmap bitmapMark=imageFileCache.getImage(url);
	    
	    if(bitmapMark==null){
	    	 mark.setTag(url);
	 	    MarkShowTask markShow=new MarkShowTask();
	 	    markShow.execute(mark);
	    }
	    else {
	    	mark.setImageBitmap(bitmapMark);
	    }
	   
	   
	   assoInfo.setOnClickListener(new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if(asso_id!=0){
			
			Intent assoInfoIntent=new Intent(AssociationActivity.this,AssociationInfoActivity.class);
			assoInfoIntent.putExtra("asso_id", asso_id);
			assoInfoIntent.putExtra("ismember", true);
			startActivity(assoInfoIntent);
		}}
	}); 
	   assoMember.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(asso_id!=0){
				
				Intent assoMemberIntent=new Intent(AssociationActivity.this,AssociationMemberActivity.class);
				assoMemberIntent.putExtra("asso_id", asso_id);
				assoMemberIntent.putExtra("asso_name", asso_name);
				startActivity(assoMemberIntent);
				
				}
			}
		});
	   assoNotice.setOnClickListener(new OnClickListener() {
		
		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			if(asso_id!=0){
				Intent assoNoticeIntent=new Intent(AssociationActivity.this,AssociationNoticeActivity.class);
				Bundle assodata=new Bundle();
				assodata.putSerializable("association", association);
				assoNoticeIntent.putExtras(assodata);
				startActivity(assoNoticeIntent);
				
			}
			
		}
	});
	   
	   
	   
		
	}
	class MarkShowTask extends AsyncTask<View, Integer, Drawable> {

		private View mView;
		private HashMap<String, SoftReference<Drawable>> imageCache;
		

		public MarkShowTask() {
			imageCache = new HashMap<String, SoftReference<Drawable>>();
		}

		@Override
		protected Drawable doInBackground(View... params) {

			// TODO Auto-generated method stub
			drawable = null;
			View view = params[0];
			if (view.getTag() != null) {
				if (imageCache.containsKey(view.getTag())) {
					SoftReference<Drawable> cache = imageCache.get(view
							.getTag().toString());
					drawable = cache.get();
					if (drawable != null) {
						return drawable;
					}
				}
				try {
					if (URLUtil.isHttpUrl(view.getTag().toString())) {
						URL url = new URL(view.getTag().toString());
						HttpURLConnection conn = (HttpURLConnection) url
								.openConnection();
						conn.setDoInput(true);
						conn.connect();
						InputStream stream = conn.getInputStream();
						drawable = Drawable.createFromStream(stream, "src");
						stream.close();
					}

				} catch (Exception e) {
					Log.v("painting", e.getMessage());
					return null;
				}
			}
			this.mView = view;
			return drawable;
		}

		@Override
		protected void onCancelled() {
			// TODO Auto-generated method stub
			super.onCancelled();
		}

		@Override
		protected void onCancelled(Drawable result) {
			// TODO Auto-generated method stub
			super.onCancelled(result);
		}

		@SuppressLint("NewApi")
		@Override
		protected void onPostExecute(Drawable result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			if (drawable != null) {
				((ImageView)this.mView).setImageDrawable(result);
				ImageFileCache imageFileCache=new ImageFileCache();
				Bitmap bm=BitmapExchangeDrawable.drawableToBitmap(result);
				imageFileCache.savedBitmap(bm, url);

			}
			
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			// TODO Auto-generated method stub
			super.onProgressUpdate(values);
		}

	}
	

}
