package com.vgpt.androidpaintings.compoent.activity.user;

import android.os.Bundle;
import android.view.View;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.Toast;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.compoent.widget.MyCollectScrollView;
import com.vgpt.androidpaintings.compoent.widget.MyCollectScrollView.OnScrollDownListener;
import com.vgpt.androidpaintings.compoent.widget.MyCollectScrollView.OnScrollToTopListener;
import com.vgpt.androidpaintings.interfaceImpl.MyActivity;

public class MyCollectActivity extends MyActivity{
	final static String ALL = "all";
	final static String GONGBI = "gongbi";
	final static String XIEYI = "xieyi";
	final static String XIHUA = "xihua";
	final static String SHUFA = "shufa";
	final static String OTHER = "others";

	float startX=0;
	float endX=0;

	MyCollectScrollView mysv;

	TextView loadMoreText;

	RadioGroup rg;

	final int LENGTH=50;
	static String category="all";



	@SuppressWarnings("unchecked")
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_my_collection);

		loadPage(MyCollectActivity.this);



//		collectList.setOnItemClickListener(new OnItemClickListener() {
//
//			@Override
//			public void onItemClick(AdapterView<?> arg0, View mView, int position,
//					long arg3) {
//				Map<String,Object> map=(Map<String, Object>) adapter.getItem(position);
//				int pic_id=(Integer) map.get("pic_id");
//				Intent showImageIntent=new Intent(MyCollectActivity.this,ShowImageActivity.class);
//				showImageIntent.putExtra("pic_id", pic_id);
//				showImageIntent.putExtra("user_id", user_id);
//				showImageIntent.putExtra("Collectornot", true);
//				startActivity(showImageIntent);
//
//			}
//		});




	}
//	class GetCollectTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
//		int checkCode;
//		List<Map<String,Object>> collect_list;
//		JSONArray collect_items;
//
//		@Override
//		protected void onPostExecute(JSONObject result) {
//			super.onPostExecute(result);
//
//			for(int i=0;i<collect_items.length();i++){
//				Map<String,Object> item=new HashMap<String, Object>();
//				JSONObject jsonItem=collect_items.optJSONObject(i);
//				item.put("pic_name",jsonItem.optString("pic_name"));
//				item.put("pic_id", jsonItem.optInt("pic_id"));
//				adapter.getItems().add(item);
//			}
//			adapter.notifyDataSetChanged();
//
//
//		}
//
//
//		@Override
//		protected JSONObject doInBackground(Map<String, Object>... params) {
//			MyHttpClient cl = MyHttpClient.getInstance();
//
//			List<NameValuePair> list = new ArrayList<NameValuePair>();
//
//			JSONObject json = new JSONObject(params[0]);
//
//			NameValuePair pa = new BasicNameValuePair("json", json.toString());
//			list.add(pa);
//
//			try {
//				cl.post(Constant.Painting.GET_COL, list,
//						new JSONResponseHandler<JSONObject>() {
//
//					@Override
//					public JSONObject handlerJson(JSONObject json) {
//						if (json != null && json.optInt("code") == 1) {
//							collect_items = json
//									.optJSONArray("result");
//
//							checkCode = json.optInt("code");
//						}
//
//						return json;
//					}
//				});
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//
//			return json;
//
//		}
//
//	}
//	class CollectAdapter extends BaseAdapter {
//		private Context mContext;
//		private List<Map<String,Object>> adapterItems;
//
//		public void notifyDataSetChanged() {
//			super.notifyDataSetChanged();
//		}
//
//		public CollectAdapter(Context mContext,List<Map<String,Object>> adapterItems){
//			this.mContext=mContext;
//			this.adapterItems=adapterItems;
//
//		}
//
//
//		public void setItems(List<Map<String,Object>> adapterItems){
//			this.adapterItems=adapterItems;
//
//		}
//
//		public List<Map<String,Object>> getItems(){
//			return adapterItems;
//
//		}
//
//		@Override
//		public int getCount() {
//			return adapterItems.size();
//		}
//
//		@Override
//		public Object getItem(int position) {
//			return adapterItems.get(position);
//		}
//
//		@Override
//		public long getItemId(int position) {
//			return position;
//		}
//
//		@Override
//		public View getView(int position, View convertView, ViewGroup parent) {
//			ItemViewHolder itemViewHolder = null;
//			if (convertView == null) {
//				convertView = LayoutInflater.from(mContext).inflate(
//						R.layout.collect_listitem, null);
//				itemViewHolder = new ItemViewHolder();
//				convertsetTag(itemViewHolder);
//
//			} else {
//				itemViewHolder = (ItemViewHolder) convertgetTag();
//
//			}
//
//			itemViewHolder.collectText = (TextView)convertfindViewById(R.id.name);
//			itemViewHolder.delButton=(Button)convertfindViewById(R.id.del_col);
//			itemViewHolder.iv=(ImageView)convertfindViewById(R.id.painting);
//			@SuppressWarnings("unchecked")
//			final
//			Map<String, Object> paintingItem = (Map<String, Object>) getItem(position);
//			int pic_id=(Integer) paintingItem.get("pic_id");
//			final int i=position;
//			itemViewHolder.collectText
//			.setText((String)paintingItem.get("pic_name"));
//			itemViewHolder.delButton.setTag(position);
//
//			Picasso.with(MyCollectActivity.this).load(Constant.Painting.GET_PICTURE+pic_id).into(itemViewHolder.iv);
//
//			itemViewHolder.delButton.setOnClickListener(new OnClickListener() {
//
//				@SuppressWarnings("unchecked")
//				@Override
//				public void onClick(View v) {
//					int delPic_id=(Integer) paintingItem.get("pic_id");
//					Map<String,Object> delmap=new HashMap<String, Object>();
//					delmap.put("pic_id",delPic_id);
//					delmap.put("user_id", user_id);
//					clickedButtonId=i;
//					DelColTask delColTask=new DelColTask();
//					delColTask.execute(delmap);
//
//
//				}
//			});
//			return convertView;
//		}
//		class ItemViewHolder{
//			TextView collectText;
//			Button delButton;
//			ImageView iv;
//		}
//
//	}
//	class DelColTask extends AsyncTask<Map<String,Object>, Integer, JSONObject>{
//		private int checkCode;
//		private JSONObject ret;
//
//		@Override
//		protected void onPostExecute(JSONObject result) {
//			super.onPostExecute(result);
//			if((checkCode==1)&&ret.optBoolean("success")){
//				adapter.getItems().remove(clickedButtonId);
//				adapter.notifyDataSetChanged();
//			}
//		}
//
//		@Override
//		protected JSONObject doInBackground(Map<String, Object>... params) {
//			MyHttpClient cl = MyHttpClient.getInstance();
//
//			List<NameValuePair> list = new ArrayList<NameValuePair>();
//
//			JSONObject json = new JSONObject(params[0]);
//
//			NameValuePair pa = new BasicNameValuePair("json", json.toString());
//			list.add(pa);
//
//			try {
//				cl.post(Constant.Painting.DEL_COL, list,
//						new JSONResponseHandler<JSONObject>() {
//
//					@Override
//					public JSONObject handlerJson(JSONObject json) {
//						if (json != null && json.optInt("code") == 1) {
//							ret = json
//									.optJSONObject("result");
//
//							checkCode = json.optInt("code");
//						}
//
//						return json;
//					}
//				});
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//
//			return json;
//		}
//
//	}
	@Override
	public void findView() {

		loadMoreText=(TextView)findViewById(R.id.loadmore);

		mysv=(MyCollectScrollView)findViewById(R.id.my_scroll_view);

		rg = (RadioGroup)findViewById(R.id.tab_category);
		
		

	}
	@Override
	public void doReady() {
		// TODO Auto-generated method stub

	}
	@Override
	public void addListener() {

		rg.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(RadioGroup group, int checkId) {

				switch(checkId){

				case R.id.allrb:mysv.setCategory(ALL);
				break;
				case R.id.gongbirb:mysv.setCategory(GONGBI);
				break;
				case R.id.xieyirb:mysv.setCategory(XIEYI);
				break;
				case R.id.xihuarb:mysv.setCategory(XIHUA);
				break;
				case R.id.shufarb:mysv.setCategory(SHUFA);
				break;
				case R.id.otherrb:mysv.setCategory(OTHER);

				}



			}
		});
		
		mysv.setOnScrollDownListener(new OnScrollDownListener() {
			
			@Override
			public void onScrollDown(boolean isDown) {
				// TODO Auto-generated method stub
				
			}
		});


		mysv.setOnScrollToTopLintener(new OnScrollToTopListener() {

			@Override
			public void onScrollTopListener(boolean isTop) {

				if(isTop){
					Toast.makeText(MyCollectActivity.this, "滑动到顶端", Toast.LENGTH_LONG).show();
				}

			}
		});


	}
	@Override
	public void showContent() {

		loadMoreText.setVisibility(View.GONE);

	}

}
