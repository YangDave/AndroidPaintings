package com.vgpt.androidpaintings.compoent.activity;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.vgpt.androidpaintings.R;
import com.vgpt.androidpaintings.biz.ExitApplication;
import com.vgpt.androidpaintings.biz.GetBitmapFromLocal;
import com.vgpt.androidpaintings.compoent.activity.dialog.WaitingDialog;
import com.vgpt.androidpaintings.constants.Constant;
import com.vgpt.androidpaintings.http.JSONResponseHandler;
import com.vgpt.androidpaintings.http.MyHttpClient;

public class SignInActivity extends Activity {

	EditText muserEditText;
	EditText mpwdEditText;
	Button msignInButton;
	Button msignUpButton;
	ImageView imageView;
	
	SharedPreferences preference;
	SharedPreferences.Editor editor;
	String username;
	
	SharedPreferences signInRecord;
	SharedPreferences.Editor signInRecordEditor;
	
	
	TableLayout msignInTable;
	TextView textView;
	
	WaitingDialog dialog;
	

	@Override
	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_sign_in);
		ExitApplication.getInstance().addActivity(this);
		
		

		muserEditText = (EditText) findViewById(R.id.signInUserId);
		mpwdEditText = (EditText) findViewById(R.id.signInPwdId);
		msignInButton = (Button) findViewById(R.id.signInButtonId);
		msignUpButton = (Button) findViewById(R.id.signUpButtonId);
		
		imageView=(ImageView)findViewById(R.id.image);
		
		

	}
	@Override
	public void onBackPressed() {
		super.onBackPressed();
	}
	private boolean isUserNameOrPwdFormat(String userNameOrPwd){
		boolean isUserNameOrPwd=false;
		Pattern p=Pattern.compile("^[a-zA-Z0-9_-]+");
		Matcher m=p.matcher(userNameOrPwd);
		boolean b=m.matches();
		if(b && userNameOrPwd.length()>=0 && userNameOrPwd.length()<=16){
			isUserNameOrPwd=true;
		}
				
		
		return isUserNameOrPwd;
		
	}

	public void signUp(View source) {

		Intent signUpIntent = new Intent(SignInActivity.this,
				SignUpActivity.class);

		startActivity(signUpIntent);
		SignInActivity.this.finish();
	}

	@SuppressWarnings("unchecked")
	public void signIn(View source) {
		
			if(isUserNameOrPwdFormat(muserEditText.getText().toString())&&
					isUserNameOrPwdFormat(mpwdEditText.getText().toString())){
			
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("username", muserEditText.getText());
		map.put("password", mpwdEditText.getText());
		final SignInTask t = new SignInTask();
		t.execute(map);
		
		dialog=new WaitingDialog(SignInActivity.this);
		dialog.createDialog();
		dialog.show();
		
		final Handler handler=new Handler(){

			@Override
			public void handleMessage(Message msg) {
				super.handleMessage(msg);
				t.cancel(true);
				dialog.cancel();
				Toast.makeText(SignInActivity.this, "网络不给力，请检查网络连接", Toast.LENGTH_LONG).show();
				
			}
		};
		
		new Thread(){
			@Override
			public void run() {
				super.run();
				try {
					Thread.sleep(5000);
					handler.sendEmptyMessage(0);
					
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
		}.start();
		
		}
			else { new OneButtonDialog(SignInActivity.this)
			.showDialog(SignInActivity.this, R.drawable.ic_launcher, R.string.userorpwdlengthwarntitle, R.string.userorpwdlengthwarn);
			
			}}
		

class SignInTask extends AsyncTask<Map<String, Object>, Integer, JSONObject> {
	
	
	private Boolean signInIsSuccess=false;
	private int checkCode;
	private int retUser_id;



	@Override
	protected void onPostExecute(JSONObject result) {
		super.onPostExecute(result);
		
		dialog.dismiss();
		if (signInIsSuccess && (checkCode==1)){
			username=muserEditText.getText().toString();
			preference=getSharedPreferences(username, MODE_PRIVATE);
			editor=preference.edit();
			editor.putString("username", username);
			editor.putInt("user_id", retUser_id);
			editor.commit();
			
			signInRecord=getSharedPreferences("signInRecord", MODE_PRIVATE);
			signInRecordEditor=signInRecord.edit();
			signInRecordEditor.putString("lastSignInUser", username);
			signInRecordEditor.commit();
					
			
		Intent intent=new Intent(SignInActivity.this,MainActivity.class);
		intent.putExtra("user_id", retUser_id);
		intent.putExtra("username", username);
		startActivity(intent);
		
		
		}
		else{
			Toast.makeText(SignInActivity.this,"登录失败", Toast.LENGTH_LONG).show();
		}
		
		
		
	}


	@Override
	protected JSONObject doInBackground(Map<String, Object>... params) {

		MyHttpClient cl = MyHttpClient.getInstance();

		List<NameValuePair> list = new ArrayList<NameValuePair>();

		JSONObject json = new JSONObject(params[0]);

		NameValuePair pa = new BasicNameValuePair("json", json.toString());
		list.add(pa);

		try {
			cl.post(Constant.Api.SIGN_IN, list,
					new JSONResponseHandler<JSONObject>() {

						@Override
						public JSONObject handlerJson(JSONObject json) {
							if(json!=null){
								checkCode=json.optInt("code");
							if(json.optInt("code")==1){
								JSONObject result=json.optJSONObject("result");
								
								if(result!=null){
									signInIsSuccess=result.optBoolean("success");
									retUser_id=result.optInt("user_id",0);
								}
							}
							}
							return json;
						}
					});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json;
	}
	
}


	}